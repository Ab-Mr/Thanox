import java.util.regex.Matcher
import java.util.regex.Pattern

// Top-level build file where you can add configuration options common to all sub-projects/modules.

buildscript {
    apply from: 'versions.gradle'
    addRepos(repositories)
    dependencies {
        classpath deps.android_gradle_plugin
        classpath deps.kotlin.plugin
        // Plugin framework
        classpath deps.nitro_plugin
        classpath deps.thanos_internal.rhino_plugin
    }
}

plugins {
    id 'com.gladed.androidgitversion' version '0.4.10'
}

allprojects {
    addRepos(repositories)

    // Show more errors.
    allprojects {
        gradle.projectsEvaluated {
            tasks.withType(JavaCompile) {
                options.compilerArgs << "-Xmaxerrs" << "1000"
            }
        }

        tasks.withType(JavaCompile) {
            options.encoding = "UTF-8"
        }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}


androidGitVersion {
    prefix 'v'
    codeFormat = 'MMNNPP'
    baseCode = 3000000
    // 1000000
    // 191011
    // First rel version
    // 1191011
    // 2041540
}

ext {
    thanosApplicationIdPrefix = "github.tornaco.android.thanos"
    thanosShortcutApplicationIdPrefix = "github.tornaco.android.thanos.shortcut"
    thanosBuildVariant = getCurrentVariant()
    thanosBuildDebug = Boolean.valueOf(thanosBuildVariant == "debug").toString()
    thanosBuildFlavor = getCurrentFlavor()
    thanosApplicationId = thanosBuildFlavor == "row" ? "${thanosApplicationIdPrefix}.pro" : "${thanosApplicationIdPrefix}"
    thanosBuildHost = getHostName()
    println "### thanosBuildHost: ${thanosBuildHost} ###"
    println "### thanosBuildVariant: ${thanosBuildVariant} ###"
    println "### thanosApplicationId: $thanosApplicationId ###"
    lockerApplicationId = "github.tornaco.practice.honeycomb.locker"

    gitCommitCount = getGitCommitCount()
    println "### gitCommitCount: ${gitCommitCount} ###"
    versionCode = (androidGitVersion.code() as int) + gitCommitCount
    println "### versionCode: ${versionCode} ###"
    println "### androidGitVersion: ${androidGitVersion.code()} ###"
    versionName = androidGitVersion.name()
}

@SuppressWarnings("GrMethodMayBeStatic")
def getGitCommitCount() {
    try {
        return Integer.parseInt('git rev-list --count HEAD'.execute().text.trim())
    } catch (Throwable e) {
        e.printStackTrace()
        return 0
    }
}

@SuppressWarnings("GrMethodMayBeStatic")
def getHostName() {
    return InetAddress.getLocalHost().getHostName()
}

def getCurrentVariant() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()
    println "tskReqStr: ${tskReqStr}"

    Pattern pattern

    if (tskReqStr.contains("assemble")) {
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    } else if (tskReqStr.contains("install")) {
        pattern = Pattern.compile("install(\\w+)(Release|Debug)")
    } else {
        println("Unable to detect variant...")
        return ""
    }

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find()) {
        return matcher.group(2).toLowerCase()
    } else {
        println "NO MATCH FOUND"
        return ""
    }
}

def getCurrentFlavor() {
    Gradle gradle = getGradle()
    String tskReqStr = gradle.getStartParameter().getTaskRequests().toString()

    Pattern pattern

    if (tskReqStr.contains("assemble"))
        pattern = Pattern.compile("assemble(\\w+)(Release|Debug)")
    else
        pattern = Pattern.compile("generate(\\w+)(Release|Debug)")

    Matcher matcher = pattern.matcher(tskReqStr)

    if (matcher.find())
        return matcher.group(1).toLowerCase()
    else {
        println "NO MATCH FOUND"
        return "";
    }
}
